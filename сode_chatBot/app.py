import nltk
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from flask import Flask, render_template, request, jsonify
import re

def extract_and_calculate(text):
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ü–∏—Ñ—Ä –∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–∫–æ–≤
    elements = re.findall(r'[\d]+|[+\-*/]', text)
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
    expression = ''.join(elements)
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        result = eval(expression)
    except Exception as e:
        return str(e)
    return expression, result

# –û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã)
data = [
    ('–ü—Ä–∏–≤–µ—Ç', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?'),
    ('–ö–∞–∫ –¥–µ–ª–∞?', '–í—Å—ë —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!'),
    ('–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?', '–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.'),
    ('–ü–æ–º–æ–≥–∏ –º–Ω–µ', '–ö–æ–Ω–µ—á–Ω–æ, —Å–∫–∞–∂–∏—Ç–µ, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?'),
    ('–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ü—Ä–∏–∫–ª–∞–¥–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è', 'üåç –ú—ã –≥—Ä—É–ø–ø–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ò–¢-–∫–æ–º–ø–∞–Ω–∏–π, –≤–Ω–µ–¥—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è–º–∏ (ERP) –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ. ‚òù –°—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö –ø–æ—á–µ—Ç–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫—Ä—É–ø–Ω—ã–µ —ç–Ω–µ—Ä–≥–æ—Ö–æ–ª–¥–∏–Ω–≥–∏, –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –ñ–ö–• –∏ –≥–æ—Å.—Å–µ–∫—Ç–æ—Ä–∞. üí• –í—Å–µ –Ω–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã –∫—Ä—É–ø–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω—ã–µ. –í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤ 1–°: –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤—É–µ–º –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –ü–û. –ú—ã –∏–º–µ–µ–º –±–æ–ª—å—à–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–µ —Ç–æ–ª—å–∫–æ —Å 1–°. –í —Å–ø–∏—Å–∫–µ –Ω–∞—à–∏—Ö —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–º–µ—é—Ç—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã SAP, java, triafly, Ma3. üåç –ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –í–∞—Å –∂–¥—É—Ç –º–∞—Å—à—Ç–∞–±–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏, –æ–±—É—á–µ–Ω–∏–µ –∑–∞ —Å—á–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏, –¥–æ—Ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ä–æ—Å—Ç—É –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞—Ö. –ú—ã –ø–æ–º–æ–∂–µ–º —Ä–∞–∑–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –Ω–∞—à–µ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ. –í–∞–º —Å –Ω–∞–º–∏ –ø–æ –ø—É—Ç–∏, –µ—Å–ª–∏ –≤—ã: ‚úÖ –ù–ï –ò–¢-—à–Ω–∏–∫. –ï—Å–ª–∏ –≤—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –Ω–∞ –ª—é–±–æ–º –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏ –∏ –≥–æ—Ç–æ–≤—ã —Å–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø–æ–º–æ—â—å –Ω–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏—Ö –±–∏–∑–Ω–µ—Å–∞. ‚úÖ –ï—Å–ª–∏ –≤—ã –ò–¢-—à–Ω–∏–∫ –∏ –≥–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞—à–∏–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏. ‚úÖ –ï—Å–ª–∏ –≤—ã –≤—ã–ø—É—Å–∫–Ω–∏–∫ –±–µ–∑ –æ–ø—ã—Ç–∞, –Ω–æ –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å —Å –ò–¢ —Å–≤–æ—é –∂–∏–∑–Ω—å. –ù–∞—à–∏ –≥–ª–∞–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: ‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è. –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –ø–æ–ª–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω—É—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –∏—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –†–∞–±–æ—Ç–∞—è –Ω–∞ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ–±—à–∏—Ä–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç–Ω—ã–π –æ–ø—ã—Ç. ‚úÖ –ù–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –ö–û–ú–ê–ù–î–ê. –í—Å—é –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–º–ø–∞–Ω–∏–∏ –º—ã –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥—è –∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –Ω–∞—à–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É, –Ω–∞–ø–æ–ª–Ω—è–µ–º –±—É–¥–Ω–∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –∏ –∑–∞–±–æ—Ç–æ–π ‚úÖ –ú—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞—à–µ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –æ–±–º–µ–Ω–∞ –∑–Ω–∞–Ω–∏—è–º–∏, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –≤ –Ω–∞—à–µ–º –æ—Ñ–∏—Å–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –∏ –ø–æ-–¥–æ–º–∞—à–Ω–µ–º—É ‚úÖ –ú—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º –∫–∞—Ä—å–µ—Ä—É –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞—à–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–∞–ª–µ–∫–æ –≤–ø–µ—Ä–µ–¥ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –µ–≥–æ –≤—ã–±–æ—Ä–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è.'),
    ('–ß–µ–º –∑–∞–Ω–∏–º–µ—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏—è –ü—Ä–∏–∫–ª–∞–¥–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è', '–†–µ—à–µ–Ω–∏—è –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º, –†–µ—à–µ–Ω–∏—è –ø–æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ, –†–µ—à–µ–Ω–∏—è –¥–ª—è –¥–ª—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏, –†–µ—à–µ–Ω–∏—è –¥–ª—è 1–°, –†–µ—à–µ–Ω–∏—è –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–µ, –†–µ—à–µ–Ω–∏—è –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º'),
    ('–ö–∞–∫–æ–≤—ã –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?', '–ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–∞—Å—à—Ç–∞–±–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö, –æ–±—É—á–µ–Ω–∏–µ –∑–∞ —Å—á–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç.'),
    ('–ì–¥–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤–∞—à–∏ –æ—Ñ–∏—Å—ã?', '–ù–∞—à–∏ –æ—Ñ–∏—Å—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –†–æ—Å—Å–∏–∏, –≤–∫–ª—é—á–∞—è –ú–æ—Å–∫–≤—É –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥.'),
    ('–ï—Å—Ç—å –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã?', '–î–∞, –º—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≥–∏–±–∫–∏–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã, –≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.'),
    ('–ö–∞–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–º–∞?', '–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–º–∞ –≤–∫–ª—é—á–∞–µ—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–∏.'),
    ('–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤?', '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ‚Äî —ç—Ç–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã.'),
    ('–ü—Ä–µ–ø–æ–¥–∞–µ—Ç–µ –ª–∏ –≤—ã –∫—É—Ä—Å—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤?', '–î–∞, —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ –∏ —Å—Ç–∞–∂–µ—Ä–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ IT.'),
    ('–ö–∞–∫–æ–≤—ã –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞?', '–ú—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º –∫–∞—Ä—å–µ—Ä—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö.'),
    ('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ª–∏ –≤—ã —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏?', '–î–∞, —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–æ–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –±–µ–∑ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã.'),
    ('–ö–∞–∫ –≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É?', '–ú—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –æ–±—É—á–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –≤ –∫–æ–º–∞–Ω–¥–µ.'),
    ('–ü–æ—Å—á–∏—Ç–∞–π, —Ä–µ—à–∏ –∑–∞–¥–∞—á—É', '#–ú–ê–¢–ï–ú–ê–¢–ò–ö–ê'),
    ('–ü–æ–∫–∞', '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!')
]

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
X, y = zip(*data)

# –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TfidfVectorizer
model = make_pipeline(TfidfVectorizer(), MultinomialNB())
model.fit(X, y)

def respond_to_query(query):
    response = model.predict([query])
    return response[0]

# # –ß—Ç–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
# while True:
#     user_input = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ")
#     if user_input.lower() == '–≤—ã—Ö–æ–¥':
#         break
#     if respond_to_query(user_input) == "#–ú–ê–¢–ï–ú–ê–¢–ò–ö–ê":
#         expression, result = extract_and_calculate(user_input)
#         print(f"–í—ã—Ä–∞–∂–µ–Ω–∏–µ: {expression}, –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
#     else:
#         print(respond_to_query(user_input))


app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/send_message', methods=['POST'])
def send_message():
    user_message = request.json.get('message')
    if respond_to_query(user_message) == "#–ú–ê–¢–ï–ú–ê–¢–ò–ö–ê":
        expression, result = extract_and_calculate(user_message)
        bot_response = f"–í—ã—Ä–∞–∂–µ–Ω–∏–µ: {expression}, –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"  # –û—Ç–≤–µ—Ç –±–æ—Ç–∞
        return jsonify({"response": bot_response})
    else:
        bot_response = respond_to_query(user_message)  # –û—Ç–≤–µ—Ç –±–æ—Ç–∞
        return jsonify({"response": bot_response})

if __name__ == '__main__':
    app.run(debug=True)
